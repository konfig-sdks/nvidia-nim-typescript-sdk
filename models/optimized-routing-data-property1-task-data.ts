/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { OrderVehicleMatch3 } from './order-vehicle-match3';
import { ServiceTimesProperty1 } from './service-times-property1';
import { TaskData3 } from './task-data3';

/**
 * All Task information
 * @export
 * @interface OptimizedRoutingDataProperty1TaskData
 */
export interface OptimizedRoutingDataProperty1TaskData {
    /**
     * dtype: int32, location >= 0.    Location where the task has been requested.
     * @type {Array<number>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'task_locations': Array<number>;
    /**
     * List of the task ids or names provided as a string.
     * @type {Array<string>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'task_ids'?: Array<string> | null;
    /**
     * dtype: int32    Note: For this release number of demand dimensions are limited to 3.    Lists of demands of each tasks. Multiple demands can be added and each list represents one kind of demand. Order of these demands should match the type of vehicle capacities provided.Example: In case of two sets of demands per vehicle with 3 vehicles,         [            [dem_1_tsk_1, dem_1_tsk_2, dem_1_tsk_3],            [dem_2_tsk_1, dem_2_tsk_2, dem_2_tsk_3]        ]
     * @type {Array<Array<number>>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'demand'?: Array<Array<number>> | null;
    /**
     * dtype: int32, pairs >= 0.    List of Pick-up and delivery index pairs from task locations. In case we have the following pick-up and delivery locations, 2->1, 4->5, 3->4, then task locations would look something like, task_locations = [0, 2, 1, 4, 5, 3, 4] and pick-up and delivery pairs would be index of those locations in task location and would look like [[1, 2], [3, 4], [5, 6]], 1 is pickup index for location 2 and it should be delivered to location 1 which is at index 2.Example schema:         [            [pcikup_1_idx_to_task, drop_1_idx_to_task],            [pcikup_2_idx_to_task, drop_2_idx_to_task],        ]
     * @type {Array<Array<number>>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'pickup_and_delivery_pairs'?: Array<Array<number>> | null;
    /**
     * dtype: int32, time >= 0.    Earliest and Latest time windows for each tasks. For example the data would look as follows,          [            [tsk_1_earliest, tsk_1_latest],            [tsk_2_earliest, tsk_2_latest]        ]
     * @type {Array<Array<number>>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'task_time_windows'?: Array<Array<number>> | null;
    /**
     * 
     * @type {ServiceTimesProperty1}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'service_times'?: ServiceTimesProperty1 | null;
    /**
     * dtype: float32, prizes >= 0.    List of values which signifies prizes that are collected for fulfilling each task. This can be used effectively in case solution is infeasible and need to drop few tasks to get feasible solution. Solver will prioritize for higher prize tasks 
     * @type {Array<number>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'prizes'?: Array<number> | null;
    /**
     * A list of order vehicle match, where the match would contain a order id and a list of vehicle ids that can serve this order.
     * @type {Array<OrderVehicleMatch3>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'order_vehicle_match'?: Array<OrderVehicleMatch3> | null;
    /**
     * dtype: int32, mandatory_task_id >= 0.    Note: This is only effective when used along with drop infeasible option.    A list of task ids which are mandatory and solver would fail if these cannot be fulfilled.
     * @type {Array<number>}
     * @memberof OptimizedRoutingDataProperty1TaskData
     */
    'mandatory_task_ids'?: Array<number> | null;
}

