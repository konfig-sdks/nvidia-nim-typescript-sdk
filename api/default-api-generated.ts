/* tslint:disable */
/* eslint-disable */
/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ControlGenerationAlgo } from '../models';
// @ts-ignore
import { ControlGenerationProp } from '../models';
// @ts-ignore
import { Fq2bamRequestBody } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LigandFormat } from '../models';
// @ts-ignore
import { MolecularDockingRequest } from '../models';
// @ts-ignore
import { MoleculeGenerationBody } from '../models';
// @ts-ignore
import { ProteinStructurePredictRequest } from '../models';
// @ts-ignore
import { UniversalVariantCallingBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Predict molecular docking
         * @summary Molecular Docking Pose Generation
         * @param {MolecularDockingRequest} molecularDockingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docking: async (molecularDockingRequest: MolecularDockingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'molecularDockingRequest' is not null or undefined
            assertParamExists('docking', 'molecularDockingRequest', molecularDockingRequest)
            const localVarPath = `/biology/mit/diffdock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: molecularDockingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/biology/mit/diffdock',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(molecularDockingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits the reads for alignment with Parabricks fq2bam.
         * @summary Run Parabricks fq2bam to align sequence reads.
         * @param {Fq2bamRequestBody} fq2bamRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fq2bam: async (fq2bamRequestBody: Fq2bamRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fq2bamRequestBody' is not null or undefined
            assertParamExists('fq2bam', 'fq2bamRequestBody', fq2bamRequestBody)
            const localVarPath = `/genomics/nvidia/fq2bam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fq2bamRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/genomics/nvidia/fq2bam',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fq2bamRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Samples novel molecules around the encoded input SMILES.
         * @summary Molecule Generation
         * @param {MoleculeGenerationBody} moleculeGenerationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate: async (moleculeGenerationBody: MoleculeGenerationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moleculeGenerationBody' is not null or undefined
            assertParamExists('generate', 'moleculeGenerationBody', moleculeGenerationBody)
            const localVarPath = `/biology/nvidia/molmim/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: moleculeGenerationBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/biology/nvidia/molmim/generate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(moleculeGenerationBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call predict function of a model that does not use multiple sequence alignments for prediction
         * @summary Protein Structure Prediction (Alignment-free)
         * @param {ProteinStructurePredictRequest} proteinStructurePredictRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proteinStructurePredictionNoAln: async (proteinStructurePredictRequest: ProteinStructurePredictRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proteinStructurePredictRequest' is not null or undefined
            assertParamExists('proteinStructurePredictionNoAln', 'proteinStructurePredictRequest', proteinStructurePredictRequest)
            const localVarPath = `/biology/nvidia/esmfold`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: proteinStructurePredictRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/biology/nvidia/esmfold',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(proteinStructurePredictRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Run parabricks universal_variant_calling
         * @summary Run Parabricks UVC inference to call variants using accelerated DeepVariant.
         * @param {UniversalVariantCallingBody} universalVariantCallingBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runParabricksUvcInference: async (universalVariantCallingBody: UniversalVariantCallingBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universalVariantCallingBody' is not null or undefined
            assertParamExists('runParabricksUvcInference', 'universalVariantCallingBody', universalVariantCallingBody)
            const localVarPath = `/genomics/nvidia/deepvariant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: universalVariantCallingBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/genomics/nvidia/deepvariant',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(universalVariantCallingBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Predict molecular docking
         * @summary Molecular Docking Pose Generation
         * @param {DefaultApiDockingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docking(requestParameters: DefaultApiDockingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const molecularDockingRequest: MolecularDockingRequest = {
                ligand: requestParameters.ligand,
                ligand_file_type: requestParameters.ligand_file_type,
                protein: requestParameters.protein,
                num_poses: requestParameters.num_poses,
                time_divisions: requestParameters.time_divisions,
                steps: requestParameters.steps,
                save_trajectory: requestParameters.save_trajectory,
                is_staged: requestParameters.is_staged
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.docking(molecularDockingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits the reads for alignment with Parabricks fq2bam.
         * @summary Run Parabricks fq2bam to align sequence reads.
         * @param {DefaultApiFq2bamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fq2bam(requestParameters: DefaultApiFq2bamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const fq2bamRequestBody: Fq2bamRequestBody = {
                in_ref_tarball: requestParameters.in_ref_tarball,
                in_fq: requestParameters.in_fq,
                out_bam: requestParameters.out_bam,
                out_bam_parts_manifest: requestParameters.out_bam_parts_manifest,
                out_bai: requestParameters.out_bai,
                out_chrs: requestParameters.out_chrs,
                out_stderr: requestParameters.out_stderr,
                out_stdout: requestParameters.out_stdout,
                additional_args: requestParameters.additional_args
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.fq2bam(fq2bamRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Samples novel molecules around the encoded input SMILES.
         * @summary Molecule Generation
         * @param {DefaultApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generate(requestParameters: DefaultApiGenerateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const moleculeGenerationBody: MoleculeGenerationBody = {
                algorithm: requestParameters.algorithm,
                smi: requestParameters.smi,
                num_molecules: requestParameters.num_molecules,
                iterations: requestParameters.iterations,
                property_name: requestParameters.property_name,
                particles: requestParameters.particles,
                minimize: requestParameters.minimize,
                min_similarity: requestParameters.min_similarity,
                scaled_radius: requestParameters.scaled_radius
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generate(moleculeGenerationBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call predict function of a model that does not use multiple sequence alignments for prediction
         * @summary Protein Structure Prediction (Alignment-free)
         * @param {DefaultApiProteinStructurePredictionNoAlnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proteinStructurePredictionNoAln(requestParameters: DefaultApiProteinStructurePredictionNoAlnRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const proteinStructurePredictRequest: ProteinStructurePredictRequest = {
                sequence: requestParameters.sequence
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.proteinStructurePredictionNoAln(proteinStructurePredictRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Run parabricks universal_variant_calling
         * @summary Run Parabricks UVC inference to call variants using accelerated DeepVariant.
         * @param {DefaultApiRunParabricksUvcInferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runParabricksUvcInference(requestParameters: DefaultApiRunParabricksUvcInferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const universalVariantCallingBody: UniversalVariantCallingBody = {
                in_ref_tarball: requestParameters.in_ref_tarball,
                in_bam: requestParameters.in_bam,
                in_bai: requestParameters.in_bai,
                mode: requestParameters.mode,
                use_gvcf: requestParameters.use_gvcf,
                use_wes_model: requestParameters.use_wes_model,
                out_variants: requestParameters.out_variants,
                out_variants_parts_manifest: requestParameters.out_variants_parts_manifest,
                out_stderr: requestParameters.out_stderr,
                out_stdout: requestParameters.out_stdout,
                additional_args: requestParameters.additional_args
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.runParabricksUvcInference(universalVariantCallingBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Predict molecular docking
         * @summary Molecular Docking Pose Generation
         * @param {DefaultApiDockingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docking(requestParameters: DefaultApiDockingRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.docking(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits the reads for alignment with Parabricks fq2bam.
         * @summary Run Parabricks fq2bam to align sequence reads.
         * @param {DefaultApiFq2bamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fq2bam(requestParameters: DefaultApiFq2bamRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.fq2bam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Samples novel molecules around the encoded input SMILES.
         * @summary Molecule Generation
         * @param {DefaultApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(requestParameters: DefaultApiGenerateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.generate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Call predict function of a model that does not use multiple sequence alignments for prediction
         * @summary Protein Structure Prediction (Alignment-free)
         * @param {DefaultApiProteinStructurePredictionNoAlnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proteinStructurePredictionNoAln(requestParameters: DefaultApiProteinStructurePredictionNoAlnRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.proteinStructurePredictionNoAln(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Run parabricks universal_variant_calling
         * @summary Run Parabricks UVC inference to call variants using accelerated DeepVariant.
         * @param {DefaultApiRunParabricksUvcInferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runParabricksUvcInference(requestParameters: DefaultApiRunParabricksUvcInferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.runParabricksUvcInference(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for docking operation in DefaultApi.
 * @export
 * @interface DefaultApiDockingRequest
 */
export type DefaultApiDockingRequest = {
    
} & MolecularDockingRequest

/**
 * Request parameters for fq2bam operation in DefaultApi.
 * @export
 * @interface DefaultApiFq2bamRequest
 */
export type DefaultApiFq2bamRequest = {
    
} & Fq2bamRequestBody

/**
 * Request parameters for generate operation in DefaultApi.
 * @export
 * @interface DefaultApiGenerateRequest
 */
export type DefaultApiGenerateRequest = {
    
} & MoleculeGenerationBody

/**
 * Request parameters for proteinStructurePredictionNoAln operation in DefaultApi.
 * @export
 * @interface DefaultApiProteinStructurePredictionNoAlnRequest
 */
export type DefaultApiProteinStructurePredictionNoAlnRequest = {
    
} & ProteinStructurePredictRequest

/**
 * Request parameters for runParabricksUvcInference operation in DefaultApi.
 * @export
 * @interface DefaultApiRunParabricksUvcInferenceRequest
 */
export type DefaultApiRunParabricksUvcInferenceRequest = {
    
} & UniversalVariantCallingBody

/**
 * DefaultApiGenerated - object-oriented interface
 * @export
 * @class DefaultApiGenerated
 * @extends {BaseAPI}
 */
export class DefaultApiGenerated extends BaseAPI {
    /**
     * Predict molecular docking
     * @summary Molecular Docking Pose Generation
     * @param {DefaultApiDockingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiGenerated
     */
    public docking(requestParameters: DefaultApiDockingRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).docking(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits the reads for alignment with Parabricks fq2bam.
     * @summary Run Parabricks fq2bam to align sequence reads.
     * @param {DefaultApiFq2bamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiGenerated
     */
    public fq2bam(requestParameters: DefaultApiFq2bamRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fq2bam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Samples novel molecules around the encoded input SMILES.
     * @summary Molecule Generation
     * @param {DefaultApiGenerateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiGenerated
     */
    public generate(requestParameters: DefaultApiGenerateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).generate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call predict function of a model that does not use multiple sequence alignments for prediction
     * @summary Protein Structure Prediction (Alignment-free)
     * @param {DefaultApiProteinStructurePredictionNoAlnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiGenerated
     */
    public proteinStructurePredictionNoAln(requestParameters: DefaultApiProteinStructurePredictionNoAlnRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).proteinStructurePredictionNoAln(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Run parabricks universal_variant_calling
     * @summary Run Parabricks UVC inference to call variants using accelerated DeepVariant.
     * @param {DefaultApiRunParabricksUvcInferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiGenerated
     */
    public runParabricksUvcInference(requestParameters: DefaultApiRunParabricksUvcInferenceRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runParabricksUvcInference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
