/* tslint:disable */
/* eslint-disable */
/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEmbedding400Response } from '../models';
// @ts-ignore
import { CreateEmbeddingRequest } from '../models';
// @ts-ignore
import { CreateEmbeddingRequestInput } from '../models';
// @ts-ignore
import { CreateEmbeddingResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NvidiaEmbeddingsQa4Api - axios parameter creator
 * @export
 */
export const NvidiaEmbeddingsQa4ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates an embedding vector from the input text.
         * @param {CreateEmbeddingRequest} createEmbeddingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedding: async (createEmbeddingRequest: CreateEmbeddingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmbeddingRequest' is not null or undefined
            assertParamExists('embedding', 'createEmbeddingRequest', createEmbeddingRequest)
            const localVarPath = `/retrieval/nvidia/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEmbeddingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/retrieval/nvidia/embeddings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NvidiaEmbeddingsQa4Api - functional programming interface
 * @export
 */
export const NvidiaEmbeddingsQa4ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NvidiaEmbeddingsQa4ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates an embedding vector from the input text.
         * @param {NvidiaEmbeddingsQa4ApiEmbeddingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embedding(requestParameters: NvidiaEmbeddingsQa4ApiEmbeddingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEmbeddingResponse>> {
            const createEmbeddingRequest: CreateEmbeddingRequest = {
                input: requestParameters.input,
                model: requestParameters.model,
                input_type: requestParameters.input_type,
                encoding_format: requestParameters.encoding_format,
                truncate: requestParameters.truncate,
                user: requestParameters.user
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.embedding(createEmbeddingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NvidiaEmbeddingsQa4Api - factory interface
 * @export
 */
export const NvidiaEmbeddingsQa4ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NvidiaEmbeddingsQa4ApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates an embedding vector from the input text.
         * @param {NvidiaEmbeddingsQa4ApiEmbeddingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedding(requestParameters: NvidiaEmbeddingsQa4ApiEmbeddingRequest, options?: AxiosRequestConfig): AxiosPromise<CreateEmbeddingResponse> {
            return localVarFp.embedding(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for embedding operation in NvidiaEmbeddingsQa4Api.
 * @export
 * @interface NvidiaEmbeddingsQa4ApiEmbeddingRequest
 */
export type NvidiaEmbeddingsQa4ApiEmbeddingRequest = {
    
} & CreateEmbeddingRequest

/**
 * NvidiaEmbeddingsQa4ApiGenerated - object-oriented interface
 * @export
 * @class NvidiaEmbeddingsQa4ApiGenerated
 * @extends {BaseAPI}
 */
export class NvidiaEmbeddingsQa4ApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates an embedding vector from the input text.
     * @param {NvidiaEmbeddingsQa4ApiEmbeddingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NvidiaEmbeddingsQa4ApiGenerated
     */
    public embedding(requestParameters: NvidiaEmbeddingsQa4ApiEmbeddingRequest, options?: AxiosRequestConfig) {
        return NvidiaEmbeddingsQa4ApiFp(this.configuration).embedding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
