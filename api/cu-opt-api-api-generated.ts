/* tslint:disable */
/* eslint-disable */
/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatCompletion } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpoint400Response } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpoint409Response } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpoint422Response } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpoint500Response } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpointRequest } from '../models';
// @ts-ignore
import { CuOptApiManagedServiceEndpointResponse } from '../models';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { OptimizedRoutingDataProperty1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CuOptApiApi - axios parameter creator
 * @export
 */
export const CuOptApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the result of an earlier function invocation request that returned a status of 202.
         * @param {string} requestId requestId to poll results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionResultGet: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('functionResultGet', 'requestId', requestId)
            const localVarPath = `/status/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId !== undefined ? requestId : `-requestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/status/{requestId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: This is for managed service. Takes all the data and options at once, solves the routing problem and returns result.  This POST should be used in conjunction with the NVCF API which allows for the upload of large assets.  You can find details on how to use NVCF Asset APIs here: https://docs.api.nvidia.com/cloud-functions/reference/createasset
         * @summary Managed Service Endpoint
         * @param {CuOptApiManagedServiceEndpointRequest} cuOptApiManagedServiceEndpointRequest 
         * @param {string} [nvcfInputAssetReferences] String of asset IDs separated by commas. Data is uploaded to AWS S3 using NVCF Asset APIs and associated with these asset IDs.If the size of the json is more than 200KB, it needs to be uploaded to a presigned S3 URL bucket. The presigned URL allows for secure and temporary access to the S3 bucket for uploading the image. Once the asset is requested, an asset ID is generated for it. Please include this asset ID in this header and to use the uploaded json the \&#39;data\&#39; field in the request body should be null; otherwise, it will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managedServiceEndpoint: async (cuOptApiManagedServiceEndpointRequest: CuOptApiManagedServiceEndpointRequest, nvcfInputAssetReferences?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cuOptApiManagedServiceEndpointRequest' is not null or undefined
            assertParamExists('managedServiceEndpoint', 'cuOptApiManagedServiceEndpointRequest', cuOptApiManagedServiceEndpointRequest)
            const localVarPath = `/nvidia/cuopt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (nvcfInputAssetReferences != null) {
                localVarHeaderParameter['NVCF-INPUT-ASSET-REFERENCES'] = String(nvcfInputAssetReferences);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cuOptApiManagedServiceEndpointRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/nvidia/cuopt',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cuOptApiManagedServiceEndpointRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CuOptApiApi - functional programming interface
 * @export
 */
export const CuOptApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CuOptApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the result of an earlier function invocation request that returned a status of 202.
         * @param {CuOptApiApiFunctionResultGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async functionResultGet(requestParameters: CuOptApiApiFunctionResultGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCompletion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.functionResultGet(requestParameters.requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note: This is for managed service. Takes all the data and options at once, solves the routing problem and returns result.  This POST should be used in conjunction with the NVCF API which allows for the upload of large assets.  You can find details on how to use NVCF Asset APIs here: https://docs.api.nvidia.com/cloud-functions/reference/createasset
         * @summary Managed Service Endpoint
         * @param {CuOptApiApiManagedServiceEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managedServiceEndpoint(requestParameters: CuOptApiApiManagedServiceEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CuOptApiManagedServiceEndpointResponse>> {
            const cuOptApiManagedServiceEndpointRequest: CuOptApiManagedServiceEndpointRequest = {
                parameters: requestParameters.parameters,
                action: requestParameters.action,
                data: requestParameters.data,
                client_version: requestParameters.client_version
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.managedServiceEndpoint(cuOptApiManagedServiceEndpointRequest, requestParameters.nvcfInputAssetReferences, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CuOptApiApi - factory interface
 * @export
 */
export const CuOptApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CuOptApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the result of an earlier function invocation request that returned a status of 202.
         * @param {CuOptApiApiFunctionResultGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        functionResultGet(requestParameters: CuOptApiApiFunctionResultGetRequest, options?: AxiosRequestConfig): AxiosPromise<ChatCompletion> {
            return localVarFp.functionResultGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: This is for managed service. Takes all the data and options at once, solves the routing problem and returns result.  This POST should be used in conjunction with the NVCF API which allows for the upload of large assets.  You can find details on how to use NVCF Asset APIs here: https://docs.api.nvidia.com/cloud-functions/reference/createasset
         * @summary Managed Service Endpoint
         * @param {CuOptApiApiManagedServiceEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managedServiceEndpoint(requestParameters: CuOptApiApiManagedServiceEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<CuOptApiManagedServiceEndpointResponse> {
            return localVarFp.managedServiceEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for functionResultGet operation in CuOptApiApi.
 * @export
 * @interface CuOptApiApiFunctionResultGetRequest
 */
export type CuOptApiApiFunctionResultGetRequest = {
    
    /**
    * requestId to poll results
    * @type {string}
    * @memberof CuOptApiApiFunctionResultGet
    */
    readonly requestId: string
    
}

/**
 * Request parameters for managedServiceEndpoint operation in CuOptApiApi.
 * @export
 * @interface CuOptApiApiManagedServiceEndpointRequest
 */
export type CuOptApiApiManagedServiceEndpointRequest = {
    
    /**
    * String of asset IDs separated by commas. Data is uploaded to AWS S3 using NVCF Asset APIs and associated with these asset IDs.If the size of the json is more than 200KB, it needs to be uploaded to a presigned S3 URL bucket. The presigned URL allows for secure and temporary access to the S3 bucket for uploading the image. Once the asset is requested, an asset ID is generated for it. Please include this asset ID in this header and to use the uploaded json the \'data\' field in the request body should be null; otherwise, it will be ignored.
    * @type {string}
    * @memberof CuOptApiApiManagedServiceEndpoint
    */
    readonly nvcfInputAssetReferences?: string
    
} & CuOptApiManagedServiceEndpointRequest

/**
 * CuOptApiApiGenerated - object-oriented interface
 * @export
 * @class CuOptApiApiGenerated
 * @extends {BaseAPI}
 */
export class CuOptApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Gets the result of an earlier function invocation request that returned a status of 202.
     * @param {CuOptApiApiFunctionResultGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuOptApiApiGenerated
     */
    public functionResultGet(requestParameters: CuOptApiApiFunctionResultGetRequest, options?: AxiosRequestConfig) {
        return CuOptApiApiFp(this.configuration).functionResultGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note: This is for managed service. Takes all the data and options at once, solves the routing problem and returns result.  This POST should be used in conjunction with the NVCF API which allows for the upload of large assets.  You can find details on how to use NVCF Asset APIs here: https://docs.api.nvidia.com/cloud-functions/reference/createasset
     * @summary Managed Service Endpoint
     * @param {CuOptApiApiManagedServiceEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CuOptApiApiGenerated
     */
    public managedServiceEndpoint(requestParameters: CuOptApiApiManagedServiceEndpointRequest, options?: AxiosRequestConfig) {
        return CuOptApiApiFp(this.configuration).managedServiceEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
