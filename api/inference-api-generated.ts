/* tslint:disable */
/* eslint-disable */
/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { ImageRequest } from '../models';
// @ts-ignore
import { ImageResponse } from '../models';
// @ts-ignore
import { TextPrompt } from '../models';
// @ts-ignore
import { VideoRequest } from '../models';
// @ts-ignore
import { VideoResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InferenceApi - axios parameter creator
 * @export
 */
export const InferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Infer
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stabilityPrediction: async (imageRequest: ImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequest' is not null or undefined
            assertParamExists('stabilityPrediction', 'imageRequest', imageRequest)
            const localVarPath = `/genai/stabilityai/sdxl-turbo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: imageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/genai/stabilityai/sdxl-turbo',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(imageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Infer
         * @param {ImageRequest} imageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stabilityPrediction_1: async (imageRequest: ImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequest' is not null or undefined
            assertParamExists('stabilityPrediction_1', 'imageRequest', imageRequest)
            const localVarPath = `/genai/stabilityai/sdxl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: imageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/genai/stabilityai/sdxl',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(imageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary  Infer
         * @param {VideoRequest} videoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stableVideoDiffusionPost: async (videoRequest: VideoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoRequest' is not null or undefined
            assertParamExists('stableVideoDiffusionPost', 'videoRequest', videoRequest)
            const localVarPath = `/genai/stabilityai/stable-video-diffusion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/genai/stabilityai/stable-video-diffusion',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InferenceApi - functional programming interface
 * @export
 */
export const InferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStabilityPredictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stabilityPrediction(requestParameters: InferenceApiStabilityPredictionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageResponse>> {
            const imageRequest: ImageRequest = {
                height: requestParameters.height,
                width: requestParameters.width,
                text_prompts: requestParameters.text_prompts,
                cfg_scale: requestParameters.cfg_scale,
                clip_guidance_preset: requestParameters.clip_guidance_preset,
                sampler: requestParameters.sampler,
                samples: requestParameters.samples,
                seed: requestParameters.seed,
                steps: requestParameters.steps,
                style_preset: requestParameters.style_preset
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.stabilityPrediction(imageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStabilityPrediction0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stabilityPrediction_1(requestParameters: InferenceApiStabilityPrediction0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageResponse>> {
            const imageRequest: ImageRequest = {
                height: requestParameters.height,
                width: requestParameters.width,
                text_prompts: requestParameters.text_prompts,
                cfg_scale: requestParameters.cfg_scale,
                clip_guidance_preset: requestParameters.clip_guidance_preset,
                sampler: requestParameters.sampler,
                samples: requestParameters.samples,
                seed: requestParameters.seed,
                steps: requestParameters.steps,
                style_preset: requestParameters.style_preset
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.stabilityPrediction_1(imageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStableVideoDiffusionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stableVideoDiffusionPost(requestParameters: InferenceApiStableVideoDiffusionPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoResponse>> {
            const videoRequest: VideoRequest = {
                image: requestParameters.image,
                seed: requestParameters.seed,
                cfg_scale: requestParameters.cfg_scale,
                motion_bucket_id: requestParameters.motion_bucket_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.stableVideoDiffusionPost(videoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InferenceApi - factory interface
 * @export
 */
export const InferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InferenceApiFp(configuration)
    return {
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStabilityPredictionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stabilityPrediction(requestParameters: InferenceApiStabilityPredictionRequest, options?: AxiosRequestConfig): AxiosPromise<ImageResponse> {
            return localVarFp.stabilityPrediction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStabilityPrediction0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stabilityPrediction_1(requestParameters: InferenceApiStabilityPrediction0Request, options?: AxiosRequestConfig): AxiosPromise<ImageResponse> {
            return localVarFp.stabilityPrediction_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary  Infer
         * @param {InferenceApiStableVideoDiffusionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stableVideoDiffusionPost(requestParameters: InferenceApiStableVideoDiffusionPostRequest, options?: AxiosRequestConfig): AxiosPromise<VideoResponse> {
            return localVarFp.stableVideoDiffusionPost(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for stabilityPrediction operation in InferenceApi.
 * @export
 * @interface InferenceApiStabilityPredictionRequest
 */
export type InferenceApiStabilityPredictionRequest = {
    
} & ImageRequest

/**
 * Request parameters for stabilityPrediction_1 operation in InferenceApi.
 * @export
 * @interface InferenceApiStabilityPrediction0Request
 */
export type InferenceApiStabilityPrediction0Request = {
    
} & ImageRequest

/**
 * Request parameters for stableVideoDiffusionPost operation in InferenceApi.
 * @export
 * @interface InferenceApiStableVideoDiffusionPostRequest
 */
export type InferenceApiStableVideoDiffusionPostRequest = {
    
} & VideoRequest

/**
 * InferenceApiGenerated - object-oriented interface
 * @export
 * @class InferenceApiGenerated
 * @extends {BaseAPI}
 */
export class InferenceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary  Infer
     * @param {InferenceApiStabilityPredictionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApiGenerated
     */
    public stabilityPrediction(requestParameters: InferenceApiStabilityPredictionRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).stabilityPrediction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Infer
     * @param {InferenceApiStabilityPrediction0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApiGenerated
     */
    public stabilityPrediction_1(requestParameters: InferenceApiStabilityPrediction0Request, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).stabilityPrediction_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary  Infer
     * @param {InferenceApiStableVideoDiffusionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApiGenerated
     */
    public stableVideoDiffusionPost(requestParameters: InferenceApiStableVideoDiffusionPostRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).stableVideoDiffusionPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
