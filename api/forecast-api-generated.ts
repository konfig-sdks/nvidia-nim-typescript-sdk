/* tslint:disable */
/* eslint-disable */
/*
Earth-2 Inference Server

API for submitting to the Earth-2 Inference Server.

The version of the OpenAPI document: 0.1.0
Contact: earth2-support@exchange.nvidia.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Config } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Output } from '../models';
// @ts-ignore
import { ResponseConfig } from '../models';
// @ts-ignore
import { SimulationParameters } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ForecastApi - axios parameter creator
 * @export
 */
export const ForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submits an inference configuration file to the server.
         * @summary Infer
         * @param {Config} config 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceSubmission: async (config: Config, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'config' is not null or undefined
            assertParamExists('inferenceSubmission', 'config', config)
            const localVarPath = `/nvidia/ai-weather-forecasting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: config,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/nvidia/ai-weather-forecasting',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(config, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForecastApi - functional programming interface
 * @export
 */
export const ForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * Submits an inference configuration file to the server.
         * @summary Infer
         * @param {ForecastApiInferenceSubmissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inferenceSubmission(requestParameters: ForecastApiInferenceSubmissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseConfig>> {
            const config: Config = {
                parameters: requestParameters.parameters,
                outputs: requestParameters.outputs
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.inferenceSubmission(config, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForecastApi - factory interface
 * @export
 */
export const ForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForecastApiFp(configuration)
    return {
        /**
         * Submits an inference configuration file to the server.
         * @summary Infer
         * @param {ForecastApiInferenceSubmissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceSubmission(requestParameters: ForecastApiInferenceSubmissionRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseConfig> {
            return localVarFp.inferenceSubmission(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for inferenceSubmission operation in ForecastApi.
 * @export
 * @interface ForecastApiInferenceSubmissionRequest
 */
export type ForecastApiInferenceSubmissionRequest = {
    
} & Config

/**
 * ForecastApiGenerated - object-oriented interface
 * @export
 * @class ForecastApiGenerated
 * @extends {BaseAPI}
 */
export class ForecastApiGenerated extends BaseAPI {
    /**
     * Submits an inference configuration file to the server.
     * @summary Infer
     * @param {ForecastApiInferenceSubmissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastApiGenerated
     */
    public inferenceSubmission(requestParameters: ForecastApiInferenceSubmissionRequest, options?: AxiosRequestConfig) {
        return ForecastApiFp(this.configuration).inferenceSubmission(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
